Skills - Invidivual things a combatant can do
Decisions - How a combatant does a thing
Goal - Why a combatant does a thing

E.G.
Skills.Walk      - Move to an arbitrary location
Skills.Inventory - Add/Remove/Equip items
Skills.Throw     - Throws an Item at a target

Decision.PickUpNearestWeapon -
     Precondition: Does not have Weapon
           Action: Skills.Walk to Weapon
                   Add Item to Skills.Inventory
             Cost: Walk weight * (1 AP * tiles moved) + (2 AP to pick up)
    Postcondition: position at Weapon
                   Weapon in inventory

Decision.ThrowWeapon
     Precondition: Enemy is alive (unspecified conditions handled by Board's actual state)
                   Enemy within line of sight (Enemy move prediction?)
                   Enemy within range
                   Weapon in inventory
           Action: Skills.Throw an item at enemy
             Cost: AP weight * (5 AP to throw) + Item weight * Item value index
    Postcondition: Weapon not in Inventory
                   Enemy is dead or dying

Decision.ChargeEnemy
     Precondition: Enemy is alive
                   Enemy within line of sight
                   Enemy in melee range
           Action: Skills.Walk to enemy
                   Skills.Attack enemy
             Cost: AP weight * (1 AP * tiles moved + 2 AP to attack) + Caution weight * danger index
    Postcondition: At new position
                   Enemy dead or dying

* Decision is a GraphNode<BoardState> where GetData returns postcondition
* Goals are just BoardState checks?
* Goals and decisions are the same thing?? fuckin raw
    * Yes. Goals are just Decisions without a postcondition.  Endpoint decisions.

Goal.KillEnemy
     Precondition: Enemy is dead

Goal.GetToSafety
     Precondition: Danger index is beneath a certain threshold


E.G.G.
Goal: GetToSafety
    1. Construct graph (O(N^2))

-------
Aside
Inventory as Skill? You'll need to handle
    * Asynchronous item adds/removals
    * /Communication with other Skills/
Verdict: nah
    * But Skills should do their own stat calculations
-------


10-30-2017
----------
Most GOAP implementations handle repeating actions in the replanning stage, since they're running in realtime.

This means, if the goal is to kill a distant enemy, the plan's lifetime goes like this:
    1. Plan: MoveToEnemy, AttackEnemy, Gloat
       Execution: MoveToEnemy, enemy is too far! Replan.
    2. Plan: MoveToEnemy, AttackEnemy, Gloat
       Execution: MoveToEnemy, enemy is too far! Replan.
    3. Plan: MoveToEnemy, AttackEnemy, Gloat
       Execution: MoveToEnemy, enemy is in range!
                  AttackEnemy, enemy is hurt but not dead! Replan.
    4. Plan: AttackEnemy, Gloat
       Execution: AttackEnemy, enemy killed!
                  Gloat. goal accomplished.

However, in LG our agents work in 5-turn timeslices without replanning.  So the above scenario might work like this:
    1. Plan: MoveToEnemy, AttackEnemy, Gloat
       Execution: MoveToEnemy, enemy is too far! End turn.

Okay, so this might work.  Come up with a plan, queue up all the actions involved. We'll need to map those actions to each Task.
At the end of a turn, re-evaluate the current Task if it's still viable.  If not, replan.

Let's make PrimitiveTask.Do return an IEnumerator, so it's like our own coroutines.
So when executing a plan it'll look like:

foreach (ITask task in plan.Decompose(start, goal)) {
    while (task.ArePreconditionsMet()) {
        yield return task.Do();
    }
}

Where the task overrides look like:

public bool ArePreconditionsMet() {
    return _walk.GetAreaOfEffect().Contains(_player.Position);
}

public IEnumerator Do() {
    walk.Target = Target;
    foreach (MoveAction move in walk.Fire()) {
        _pawn.PushAction(move);
        yield return null;
    }
}

Or something